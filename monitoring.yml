---
- name: Install node_exporter
  remote_user: svc-ansible
  become: true
  hosts: all

  tasks:
  - name: Install role pre-requisites
    tags:
    - monitoring
    - node_exporter
    yum:
      name: "{{ packages }}"
      state: present
    vars:
      packages:
      - tar
      - unzip

  - import_role:
      name: ansible-role-prometheus-node-exporter
    tags:
    - monitoring
    - node_exporter
    vars:
      prometheus_node_exporter_version: 0.18.1
      prometheus_node_exporter_download_url: https://github.com/prometheus/node_exporter/releases/download/v{{ prometheus_node_exporter_version }}/node_exporter-{{ prometheus_node_exporter_version }}.linux-amd64.tar.gz
      prometheus_node_exporter_enabled_collectors:
      - systemd
      prometheus_node_exporter_disabled_collectors:
      - timex
      - xfs


  - name: Open node_exporter firewall port for prometheus access
    tags:
    - monitoring
    - node_exporter
    become: true
    firewalld:
      immediate: true
      port: 9100/tcp
      permanent: true
#      source: "{{ item }}"
      state: enabled
      zone: public
#    with_items: "{{ prometheus_server_ips }}"



- name: Configure InfluxDB
  remote_user: svc-ansible
  become: true
  hosts: influxdb
  vars_files:
  - vault.yml

  tasks:
  - import_role:
      name: ansible-influxdb
    tags:
    - monitoring
    - influxdb
    vars:
      influxdb_redhat_pre_reqs:
      - python3-pip
      - python3-requests
      influxdb_config: true
      influxdb_http:
        auth_enabled: true
        bind_address: ""
        bind_port: "{{ influxdb_http_port }}"
        bind_socket: /var/run/influxdb.sock
        enabled: true
        https_enabled: "{{ influxdb_enable_ssl }}"
        https_certificate: /etc/pki/tls/certs/{{ ansible_fqdn }}.pem
        https_private_key: /etc/pki/tls/private/{{ ansible_fqdn }}.key
        log_enabled: true
        max_connection_limit: 0
        max_row_limit: 0
        pprof_enabled: true
        realm: InfluxDB
        shared_secret: ""
        unix_socket_enabled: false
        write_tracing: false

  # Not done inside role
  - name: Open InfluxDB firewall ports
    tags:
    - monitoring
    - influxdb
    firewalld:
      port: "{{ item }}"
      immediate: yes
      permanent: yes
      state: enabled
    with_items:
    - 8086/tcp
    #- 8189/udp

  # Not done inside role
  - name: Create InfluxDB users
    tags:
    - monitoring
    - influxdb
    influxdb_user:
      login_username: "{{ influxdb_admin_user }}"
      login_password: "{{ influxdb_admin_password }}"
      hostname: "{{ ansible_fqdn }}"
      ssl: "{{ influxdb_enable_ssl | default(false) }}"
      user_name: "{{ item.0.username }}"
      user_password: "{{ item.0.password }}"
      grants:
      - database: "{{ item.1.database }}"
        privilege: '{{ item.1.grants }}'
    with_subelements:
    - "{{ influxdb_users }}"
    - permissions
    no_log: true


- name: Configure Prometheus
  remote_user: svc-ansible
  become: true
  hosts: prometheus
  vars_files:
  - vault.yml

  tasks:
  - import_role:
      name: ansible-prometheus
    tags:
    - monitoring
    - prometheus
    vars:
      prometheus_remote_write:
      - url: https://{{ groups['influxdb'][0] }}:{{ influxdb_http_port }}/api/v1/prom/write?db=prometheus
        basic_auth:
          username: 'prometheus'
          password: "{{ vault_influxdb_prometheus_password }}"

  # Not done inside role (Only needed if we are federating Prometheus)
  - name: Open Prometheus firewall ports
    tags:
    - monitoring
    - prometheus
    firewalld:
      port: "{{ item }}"
      immediate: yes
      permanent: yes
      state: enabled
    with_items:
    - 9090/tcp



  # - include_role:
  #     name: ansible-pushgateway

  - import_role:
      name: ansible-snmp-exporter
    tags:
    - monitoring
    - prometheus
    - snmp_exporter

  # - include_role:
  #     name: ansible-blackbox-exporter


# - name: Configure Grafana
#   remote_user: svc-ansible
#   become: true
#   hosts: grafana
#   vars_files:
#   - vault.yml

#   tasks:
#   # - name: Copy SSL key for grafana
#   #   copy:
#   #     src: "/etc/pki/tls/private/{{ ansible_fqdn }}.key"
#   #     dest: /etc/pki/tls/private/grafana.key
#   #     remote_src: true
#   #     owner: grafana
#   #     mode: '0600'

#   - import_role:
#       name: ansible-grafana
#     tags:
#     - monitoring
#     - grafana
