---
# Create Hammer directory on /root
- name: "Create .hammer directory"
  file:
    path: "/root/.hammer"
    state: "directory"
    mode: "0755"

# Copy the hammer configuration from template to the .hammer directory
- name: "Deploy hammer configuration from template"
  template:
    src: "hammer_config.yml.j2"
    dest: "/root/.hammer/cli_config.yml"

# Copy the manifest
- name: "Copy manifest"
  copy:
    src: "{{ satellite_manifest_path }}"
    dest: "{{ satellite_manifest_dest_path }}"
  when: not satellite_remote_manifest

- name: "Copy manifest from remote"
  get_url:
    url: "{{ satellite_manifest_path }}"
    dest: "{{ satellite_manifest_dest_path }}"
    validate_certs: no
  when: satellite_remote_manifest

# Upload the manifest to the satellite
#   (rc 70 returned when 'Import is the same as existing data')
- name: "Upload the manifest"
  shell: "hammer subscription upload --file
    {{ satellite_manifest_dest_path }} --organization
    {{ satellite_organization }}"
  register: uploadstatus
  failed_when: "uploadstatus.rc != 0 and uploadstatus.rc != 70"

# Tasks for sync-host and disco systems
- block:
  # TODO: Install sat6_scripts
  - name: Install sat6_scripts (disconnected tools)
    yum:
      name: sat6_scripts
      state: latest

  # TODO: Configure sat6_scripts - maybe in another task file?



  # Tasks for sync host
  - block:
    # TODO: pulp export perms/contexts
    #- name: Set permissions on pulp export directory


    - name: Configure pulp export directory
      shell: "hammer settings set --name pulp_export_destination --value {{ export_dir }}"
    when: is_sync_host

  # Tasks for disconnected system
  - block:
    # In 6.4 we can set katello up to understand disconnected has no CDN connection.
    - name: Configure Satellite as disconnected (6.4+)
      shell: "hammer settings set --name content_disconnected --value true"
      when: satellite_version >= 6.4

    when: is_disconnected
  when: is_disconnected or is_sync_host

# Experience shows that these should be immediate for reliable functionality - in ALL cases
- name: Configure immediate download policy
  shell: "hammer settings set --name {{ item }} --value immediate"
  with_items:
    - default_download_policy
    - default_proxy_download_policy


# Email configurations
- block:
  # All sat6 versions configure these via hammer
  - name: Configure Satellite email
    shell: "hammer settings set --name {{ item.param }} --value {{ item.value }}"
    with_items:
      - param: email_reply_address
        value: "{{ email_reply_address }}"
      - param: email_subject_prefix
        value: "{{ email_subject_prefix }}"

  - block:
    # 6.2 and 6.3 require email config in /usr/share/foreman/config/email.yaml
    - name: Deploy Foreman email config
      template:
        src: email.yaml.j2
        dest: /etc/foreman/email.yaml
    when: satellite_version <= 6.3

   # 6.4 can set these params via hammer
  - block:
    - name: Configure Satellite email
      shell: "hammer settings set --name {{ item.param }} --value {{ item.value }}"
      with_items:
        - param: email_smtp_host
          value: "{{ email_smtp_host }}"
        - param: email_smtp_port
          value: "{{ email_smtp_port }}"
    when: satellite_version >= 6.4

  # If we need to append classification headers...
  - block:
    - name: Configure Postfix classification headers
      template:
        src: postfix_classify.j2
        dest: /etc/postfix/classification
      notify: restart_postfix

    - name: Update Postfix config to include headers
      lineinfile:
        path: /etc/postfix/main.cf
        regexp: "^header_checks "
        insertafter: "^#header_checks"
        line: "header_checks = regexp:/etc/postfix/classification"
      notify: restart_postfix

    - name: Update Postfix config to include headers
      lineinfile:
        path: /etc/postfix/main.cf
        regexp: "^relayhost "
        insertafter: "^#relayhost"
        line: "relayhost = smtp.example.org"
      notify: restart_postfix
    when: postfix_headers
  when: configure_email


- block:
  - name: "Configure Template Sync (6.3+)"
    command: "{{ plugin_installer_cmd }} --enable-foreman-plugin-templates"

    #- foreman ssh keys for git (/usr/share/foreman/.ssh)

    #- template-sync params

    #- perform template sync
    # curl -H "Accept:application/json,version=2" -H "Content-Type:application/json" \
    #   -u admin -k https://{{ ansible_fqdn }}/api/v2/templates/import -X POST
  when: foreman_plugin_templates and satellite_version >= 6.3





# TODO: Configure IdM user access (Only if host if IdM joined)
# kinit {{ idm_admin_user }}
# ipa service-add HTTP/{{ ansible_fqdn }}
# satellite-installer --foreman-ipa-authentication=true

# TODO: Configure IdM Realm (Host must be IdM joined)
# foreman-prepare-realm {{ idm_admin_user }} realm-capsule
# mv /root/freeipa.keytab /etc/foreman-proxy
# chown foreman-proxy:foreman-proxy /etc/foreman-proxy/freeipa.keytab
# satellite-installer --foreman-proxy-realm true \
# --foreman-proxy-realm-keytab /etc/foreman-proxy/freeipa.keytab \
# --foreman-proxy-realm-principal realm-capsule@EXAMPLE.COM \
# --foreman-proxy-realm-provider freeipa
# cp /etc/ipa/ca.crt /etc/pki/ca-trust/source/anchors/ipa.crt
# update-ca-trust enable
# update-ca-trust
# service foreman-proxy restart


############### Move below here to content_setup ? #########################

# TODO: Need to sleep a bit here - initial sync can't start immediately



# - name: Get the enabled repos
#   delegate_to: localhost
#   uri:
#     url: "{{ katello_api }}/repositories?organization_id=1&content_type=yum"
#     method: GET
#     user: "{{ satellite_admin_username }}"
#     password: "{{ satellite_admin_password }}"
#     force_basic_auth: yes
#     validate_certs: no
#     status_code: 200
#   register: api_result

# - set_fact:
#     repos: "{{ api_result.json.results }}"

# # TODO: Don't enable a repo if it is already enabled

# # Enable repos on satellite (Fails if already enabled)
# - name: "Enable repositories"
#   shell: "hammer repository-set '{{ item.state }}' --organization
#     '{{ satellite_organization }}'
#     --product '{{ item.product_name }}' --name '{{ item.name_repo }}'
#     {% if item.rel is defined %} --releasever '{{ item.rel }}' {% endif %}
#     --basearch '{{ item.architecture}}'"
#   with_items: "{{ satellite_repositories }}"
#   ignore_errors: "yes"

# - name: Get the enabled repo ids
#   delegate_to: localhost
#   uri:
#     url: "{{ katello_api }}/repositories?organization_id=1&content_type=yum"
#     method: GET
#     user: "{{ satellite_admin_username }}"
#     password: "{{ satellite_admin_password }}"
#     force_basic_auth: yes
#     validate_certs: no
#     status_code: 200
#   register: api_result

# - name: Set repo_ids fact
#   set_fact:
#     repo_ids: "{{ api_result.json.results | map(attribute='id') | list }}"

# - debug:
#     var: repo_ids
#
# - debug:
#     msg: "ID = {{ item.id }}"
#   with_items: "{{ repos }}"


# TODO: Add EPEL as upstream repo

# TODO: Create sync plan

# TODO: Add Tower svc account
# Role:  Fact value -> view_facts -> Read Satellite Server facts
#        Host -> view hosts -> Read Satellite Server hosts
#        Host group -> view_hostgroups -> View Satelltie server host groups
