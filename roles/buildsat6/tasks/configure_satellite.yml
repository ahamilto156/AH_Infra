---
# Create Hammer directory on /root
- name: "Create .hammer directory"
  file:
    path: "~/.hammer"
    state: "directory"
    mode: "0755"

# Copy the hammer configuration from template to the .hammer directory
- name: "Deploy hammer configuration from template"
  template:
    src: "hammer_config.yml.j2"
    dest: "~/.hammer/cli_config.yml"

# Copy the manifest
- name: "Copy manifest"
  copy:
    src: "{{ satellite_manifest_path }}"
    dest: "{{ satellite_manifest_dest_path }}"
  when: not satellite_remote_manifest

- name: "Copy manifest from remote"
  get_url:
    url: "{{ satellite_manifest_path }}"
    dest: "{{ satellite_manifest_dest_path }}"
    validate_certs: no
  when: satellite_remote_manifest

# Upload the manifest to the satellite
- name: "Upload the manifest"
  shell: "hammer subscription upload --file
    {{ satellite_manifest_dest_path }} --organization
    {{ satellite_organization }}"

# Sync host for disconnected environment needs the export directory configured
- block:
  # TODO: pulp export perms/contexts
  #- name: Set permissions on pulp export directory


  - name: Configure pulp export directory
    shell: "hammer settings set pulp_export_destination {{ export_dir }}"
  when: is_sync_host

# In 6.4 we can set katello up to understand disconnected has no CDN connection.
- block:
  - name: Configure Satellite as disconnected
    shell: "hammer settings set content_disconnected true"
    when: satellite_version >= 6.4


  when: is_disconnected

# Experience shows that these should be immediate for reliable functionality.
- name: Configure immediate download policy
  shell: "hammer settings set {{ item }} immediate"
  with_items:
    - default_download_policy
    - default_proxy_download_policy



- name: Configure Satellite email
  shell: "hammer settings set {{ item.key }} {{ item.value }}"
  with_items: "{{ satellite_email_params }}"

#cat << EOF > /etc/postfix/classification
#/^Content-Transfer-Encoding/i PREPEND x-classification: UNCLASSIFIED
#/^Content-Transfer-Encoding/i PREPEND x-protective-marking: VER=2012.3, NS=example.org, SEC=UNCLASSIFIED, ORIGIN=satellite@example.org
#EOF
#sed -i 's/^#header_checks = /header_checks = regexp:\/etc\/postfix\/classification/' /etc/postfix/main.cf
#sed -i 's/^#relayhost = uucphost/relayhost = smtp.example.org/' /etc/postfix/main.cf

# Set Satellite to send mail to the local postfix instance:
#cat << EOF > /etc/foreman/email.yaml
# Outgoing email settings
#production:
#  delivery_method: :smtp
#  smtp_settings:
#    address: localhost
#    port: 25
#    enable_starttls_auto: false
#EOF





# TODO: Install sat6_scripts
#- name: Install sat6_scripts (disconnected tools)
#  yum:
#    name: sat6_scripts
#    state: latest
#  when: is_disconnected or is_sync_host

# TODO: Configure sat6_scripts - maybe in another task file?


# TODO: Configure template sync
#- foreman ssh keys for git (/usr/share/foreman/.ssh)
#- template-sync params
#- perform template sync
# curl -H "Accept:application/json,version=2" -H "Content-Type:application/json" \
#   -u admin -k https://{{ ansible_fqdn }}/api/v2/templates/import -X POST



# TODO: Configure IdM user access (Only if host if IdM joined)
# kinit {{ idm_admin_user }}
# ipa service-add HTTP/{{ ansible_fqdn }}
# satellite-installer --foreman-ipa-authentication=true

# TODO: Configure IdM Realm (Host must be IdM joined)
# foreman-prepare-realm {{ idm_admin_user }} realm-capsule
# mv /root/freeipa.keytab /etc/foreman-proxy
# chown foreman-proxy:foreman-proxy /etc/foreman-proxy/freeipa.keytab
# satellite-installer --foreman-proxy-realm true \
# --foreman-proxy-realm-keytab /etc/foreman-proxy/freeipa.keytab \
# --foreman-proxy-realm-principal realm-capsule@EXAMPLE.COM \
# --foreman-proxy-realm-provider freeipa
# cp /etc/ipa/ca.crt /etc/pki/ca-trust/source/anchors/ipa.crt
# update-ca-trust enable
# update-ca-trust
# service foreman-proxy restart


############### Move below here to content_setup ? #########################

# TODO: Need to sleep a bit here - initial sync can't start immediately



- name: Get the enabled repos
  delegate_to: localhost
  uri:
    url: "{{ katello_api }}/repositories?organization_id=1&content_type=yum"
    method: GET
    user: "{{ satellite_admin_username }}"
    password: "{{ satellite_admin_password }}"
    force_basic_auth: yes
    validate_certs: no
    status_code: 200
  register: api_result

- set_fact:
    repos: "{{ api_result.json.results }}"

# TODO: Don't enable a repo if it is already enabled

# Enable repos on satellite (Fails if already enabled)
- name: "Enable repositories"
  shell: "hammer repository-set '{{ item.state }}' --organization
    '{{ satellite_organization }}'
    --product '{{ item.product_name }}' --name '{{ item.name_repo }}'
    {% if item.rel is defined %} --releasever '{{ item.rel }}' {% endif %}
    --basearch '{{ item.architecture}}'"
  with_items: "{{ satellite_repositories }}"
  ignore_errors: "yes"

- name: Get the enabled repo ids
  delegate_to: localhost
  uri:
    url: "{{ katello_api }}/repositories?organization_id=1&content_type=yum"
    method: GET
    user: "{{ satellite_admin_username }}"
    password: "{{ satellite_admin_password }}"
    force_basic_auth: yes
    validate_certs: no
    status_code: 200
  register: api_result

- name: Set repo_ids fact
  set_fact:
    repo_ids: "{{ api_result.json.results | map(attribute='id') | list }}"

# - debug:
#     var: repo_ids
#
# - debug:
#     msg: "ID = {{ item.id }}"
#   with_items: "{{ repos }}"


# TODO: Add EPEL as upstream repo

# TODO: Create sync plan
