---
# Create Hammer directory on /root
- name: "Create .hammer directory"
  file:
    path: "/root/.hammer"
    state: "directory"
    mode: "0755"

# Copy the hammer configuration from template to the .hammer directory
- name: "Deploy hammer configuration from template"
  template:
    src: "hammer_config.yml.j2"
    dest: "/root/.hammer/cli_config.yml"

# Copy the manifest
- name: "Copy manifest"
  copy:
    src: "{{ satellite_manifest_path }}"
    dest: "{{ satellite_manifest_dest_path }}"
  when: not satellite_remote_manifest

- name: "Copy manifest from remote"
  get_url:
    url: "{{ satellite_manifest_path }}"
    dest: "{{ satellite_manifest_dest_path }}"
    validate_certs: no
  when: satellite_remote_manifest

# Upload the manifest to the satellite
#   (rc 70 returned when 'Import is the same as existing data')
- name: "Upload the manifest"
  shell: "hammer subscription upload --file
    {{ satellite_manifest_dest_path }} --organization
    {{ satellite_organization }}"
  register: uploadstatus
  failed_when: "uploadstatus.rc != 0 and uploadstatus.rc != 70"

# Retrieve currently installed plugins
- name: Check installed plugins
  uri:
    url: https://{{ ansible_fqdn }}/api/v2/plugins
    method: GET
    body_format: json
    user: admin
    password: "{{ satellite_admin_password }}"
    force_basic_auth: true
    validate_certs: no
  register: sat_plugins
  changed_when: false

# Tasks for sync-host and disco systems
- block:
  # TODO: Install sat6_scripts
  - name: Install sat6_scripts (disconnected tools)
    yum:
      name: sat6_scripts
      state: latest

#  - name: Create sat6_scripts API user in Satellite

  # TODO: Configure sat6_scripts



  # Tasks for sync host
  - block:
    - name: Set SELinux fcontext on export directory
      sefcontext:
        target: "{{ export_dir }}(/.*)?"
        setype: foreman_var_run_t
        state: present

    - name: Set permissions on pulp export directory
      file:
        path: "{{ export_dir }}"
        state: directory
        owner: foreman
        group: foreman
        mode: 0755
        setype: foreman_var_run_t

    - name: Configure pulp export directory
      shell: "hammer settings set --name pulp_export_destination --value {{ export_dir }}"
    when: is_sync_host

  # Tasks for disconnected system
  - block:
    - name: Set permissions on import directory
      file:
        path: "{{ import_dir }}"
        state: directory
        owner: foreman
        group: foreman
        mode: 0755

    - name: Link import directory into web content
      file:
        path: /var/www/html/pub/.cdn
        src: "{{ import_dir }}"
        state: link

#    - name: Set Satellite CDN path


    # In 6.4 we can set katello up to understand disconnected has no CDN connection.
    - name: Configure Satellite as disconnected (6.4+)
      shell: "hammer settings set --name content_disconnected --value true"
      when: satellite_version >= 6.4

    when: is_disconnected
  when: is_disconnected or is_sync_host

# Experience shows that these should be immediate for reliable functionality - in ALL cases
- name: Configure immediate download policy
  shell: "hammer settings set --name default_download_policy --value immediate"

- name: Configure capsule immediate download policy (6.3+)
  shell: "hammer settings set --name default_proxy_download_policy --value immediate"
  when: satellite_version >= 6.3

# Email configurations
- block:
  # All sat6 versions configure these via hammer
  - name: Configure Satellite email
    shell: "hammer settings set --name {{ item.param }} --value {{ item.value }}"
    with_items:
      - param: email_reply_address
        value: "{{ email_reply_address }}"
      - param: email_subject_prefix
        value: "{{ email_subject_prefix }}"

  - block:
    # 6.2 and 6.3 require email config in /usr/share/foreman/config/email.yaml
    - name: Deploy Foreman email config
      template:
        src: email.yaml.j2
        dest: /etc/foreman/email.yaml
    when: satellite_version <= 6.3

   # 6.4 can set these params via hammer
  - block:
    - name: Configure Satellite email
      shell: "hammer settings set --name {{ item.param }} --value {{ item.value }}"
      with_items:
        - param: smtp_address
          value: "{{ email_smtp_address }}"
        - param: smtp_port
          value: "{{ email_smtp_port }}"
    when: satellite_version >= 6.4

  # If we need to append classification headers...
  - block:
    - name: Configure Postfix classification headers
      template:
        src: postfix_classify.j2
        dest: /etc/postfix/classification
      notify: restart_postfix

    - name: Update Postfix config to include headers
      lineinfile:
        path: /etc/postfix/main.cf
        regexp: "^header_checks "
        insertafter: "^#header_checks"
        line: "header_checks = regexp:/etc/postfix/classification"
      notify: restart_postfix

    - name: Update Postfix config to include headers
      lineinfile:
        path: /etc/postfix/main.cf
        regexp: "^relayhost "
        insertafter: "^#relayhost"
        line: "relayhost = smtp.example.org"
      notify: restart_postfix
    when: postfix_headers
  when: configure_email

- name: Configure General Satellite Settings
  shell: "hammer settings set --name {{ item.param }} --value {{ item.value }}"
  with_items:
    - param: entries_per_page
      value: "{{ entries_per_page }}"
    - param: errata_status_installable
      value: "{{ errata_status_installable }}"

# - debug:
#     var: sat_plugins.json.results

# - debug:
#     msg: "TRUE"
#   when: "'foreman_templates' not in sat_plugins.json.results | map(attribute='id') | list "

# Provisioning Template Sync
- block:
  - name: Enable Template Sync (6.3+)
    command: "{{ plugin_installer_cmd }} --enable-foreman-plugin-templates"
    when: "'foreman_templates' not in sat_plugins.json.results | map(attribute='id') | list"

  - name: Configure SSH keys for foreman user (Git access)
    file:
      path: /usr/share/foreman/.ssh
      state: directory
      owner: foreman
      group: foreman
      mode: 0700
      setype: ssh_home_t

  - name: Deploy foreman SSH private key
    copy:
      content: "{{ vault_satellite_foreman_private_ssh_key }}"
      dest: /usr/share/foreman/.ssh/id_rsa
      owner: foreman
      group: foreman
      mode: 0600

  - name: Deploy foreman SSH public key
    copy:
      content: "{{ vault_satellite_foreman_public_ssh_key }}"
      dest: /usr/share/foreman/.ssh/id_rsa.pub
      owner: foreman
      group: foreman
      mode: 0644

  - name: Configure Template Sync
    shell: "hammer settings set --name {{ item.param }} --value {{ item.value }}"
    with_items:
      - param: template_sync_repo
        value: "{{ template_sync_repo }}"
      - param: template_sync_branch
        value: "{{ template_sync_branch }}"
      - param: template_sync_prefix
        value: "{{ template_sync_prefix }}"
      - param: template_sync_associate
        value: "{{ template_sync_associate }}"

  - name: Sync Provisioning Templates from Git
    uri:
      url: https://{{ ansible_fqdn }}/api/v2/templates/import
      method: POST
      body_format: json
      user: admin
      password: "{{ satellite_admin_password }}"
      force_basic_auth: true
      validate_certs: no

  - name: Configure Global PXE templates
    shell: "hammer settings set --name {{ item.param }} --value '{{ item.value }}'"
    with_items:
      - param: global_PXEGrub
        value: "{{ global_PXEGrub }}"
      - param: global_PXEGrub2
        value: "{{ global_PXEGrub2 }}"
      - param: global_PXELinux
        value: "{{ global_PXELinux }}"
      - param: local_boot_PXEGrub
        value: "{{ local_boot_PXEGrub }}"
      - param: local_boot_PXEGrub2
        value: "{{ local_boot_PXEGrub2 }}"
      - param: local_boot_PXELinux
        value: "{{ local_boot_PXELinux }}"

  # TODO: Associate OS with custom templates

  # TODO: Need to build PXE defaults to push templates out to TFTP servers

  when: foreman_plugin_templates and satellite_version >= 6.3



# Configure IdM user authentication
- block:
  - name: Find default IPA server
    shell: "cat /etc/ipa/default.conf | grep ^server | awk '{ print $3 }'"
    register: ipa_server
    changed_when: false

  - name: Create HTTP service keytab
    ipa_service:
      name: "HTTP/{{ ansible_fqdn }}"
      state: present
      ipa_host: "{{ ipa_server.stdout }}"
      ipa_user: "{{ idm_admin_user }}"
      ipa_pass: "{{ idm_admin_pass }}"

  # TODO: Check if IPA auth is already enabled

  - name: Enable IPA authentication in Satellite
    command: "{{ plugin_installer_cmd }} --foreman-ipa-authentication=true"
  when: auth_idm


# # foreman-prepare-realm {{ idm_admin_user }} realm-capsule

# # mv /root/freeipa.keytab /etc/foreman-proxy/freeipa.keytab
# # chown foreman-proxy:foreman-proxy /etc/foreman-proxy/freeipa.keytab
#   - name: Make keytab available to foreman-proxy
#     copy:
#       src: /root/freeipa.keytab
#       dest: /etc/foreman-proxy/freeipa.keytab
#       remote_src: yes
#       group: foreman-proxy
#       owner: foreman-proxy
#       mode: 0644

# # satellite-installer --foreman-proxy-realm true \
# # --foreman-proxy-realm-keytab /etc/foreman-proxy/freeipa.keytab \
# # --foreman-proxy-realm-principal realm-capsule@{{ ipa_realm }} \
# # --foreman-proxy-realm-provider freeipa
#   - name: Enable IPA realm proxy
#     command: |
#       "{{ plugin_installer_cmd }} --foreman-proxy-realm true
#       --foreman-proxy-realm-keytab /etc/foreman-proxy/freeipa.keytab
#       --foreman-proxy-realm-principal realm-capsule@{{ ipa_realm }}
#       --foreman-proxy-realm-provider freeipa"

# # cp /etc/ipa/ca.crt /etc/pki/ca-trust/source/anchors/ipa.crt
#   - name: Copy IPA CA Cert
#     copy:
#       src: /etc/ipa/ca.crt
#       dest: /etc/pki/ca-trust/source/anchors/ipa.crt
#       remote_src: yes
#       group: root
#       owner: root
#       mode: 0644
#     register: ca_updated

# # update-ca-trust enable
# # update-ca-trust
#   - name: Trust IPA CA globally
#     command: "update-ca-trust enable; update-ca-trust"
#     when: ca_updated.changed

# # service foreman-proxy restart

#   when: ipa_proxy




# TODO: Configure AD Authentication


# TODO: Configure LDAP Authentication



# TODO: Add Tower svc account
# Role:  Fact value -> view_facts -> Read Satellite Server facts
#        Host -> view hosts -> Read Satellite Server hosts
#        Host group -> view_hostgroups -> View Satelltie server host groups
