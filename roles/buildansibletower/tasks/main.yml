---
- name: Install additional RPM packages
  yum:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
      - python-pip
      - python-dns
      - python-netaddr
      - git
      - sshpass
      - openldap-clients

- name: install the last version of OpenSSL
  pip:
    name: "{{ packages }}"
    state: latest
    umask: "0022"
  vars:
    packages:
      - f5-sdk
      - f5-icontrol-rest
      - pyOpenSSL
      - ansible-tower-cli
      - pywinrm>=0.2.2
      - pywinrm[kerberos]
      - pywinrm[credssp]

- name: Configure firewall
  firewalld:
    service: https
    immediate: true
    permanent: true
    state: enabled

# - name: Allow insecure git repos for self signed certificates
#   command: git config --global http.sslVerify "false"

- name: check if we need to run the installer
  uri:
    url: https://localhost/api/v1/ping/
    method: GET
    user: admin
    password: "{{ tower_pass }}"
    validate_certs: False
  register: checkout
  ignore_errors: True

- name: set condtional if Tower is running
  set_fact:
    towerchk: "{{ checkout.json.version }}"
  when: checkout.json is defined

- name: Download Ansible Tower bundle
  get_url:
    url: "{{ tower_repo_url }}/ansible-tower-setup-bundle-{{ tower_version }}.el7.tar.gz"
    dest: /tmp/ansible-tower-setup-bundle.tar.gz
  when: towerchk not in tower_version

- name: Untar Tower bundle
  unarchive:
    src: /tmp/ansible-tower-setup-bundle.tar.gz
    dest: /tmp/
    remote_src: true
    owner: root
  when: towerchk not in tower_version

# Allow other jobs to read the tower config dir. This is so that we can use the tower cert in CFME
- name: Allow access to Tower config directory
  lineinfile:
    dest: /tmp/ansible-tower-setup-bundle-{{ tower_version }}.el7/roles/awx_install/templates/settings.py.j2
    line: "AWX_PROOT_SHOW_PATHS = ['/etc/tower/']"
  when: towerchk != tower_version

- name: Stage Tower installation inventory
  template:
    src: templates/towerinventorysetup
    dest: /tmp/ansible-tower-setup-bundle-{{ tower_version }}.el7/inventory
  when: towerchk != tower_version

- name: Run the Tower installer (This will take some time)
  command: chdir=/tmp/ansible-tower-setup-bundle-{{ tower_version }}.el7 ./setup.sh
  register: towerinstall
  when: towerchk not in tower_version

- name: wait for tower to be up
  uri:
    url: https://localhost/api/v1/ping/
    method: GET
    user: admin
    password: "{{ tower_pass }}"
    validate_certs: False
    force_basic_auth: yes
  register: check2
  until: check2.json is defined and check2.json.version in tower_version
  retries: 10
  delay: 30
  when: towerchk not in tower_version

- name: Update permissions on Tower certificate
  file:
    path: /etc/tower/tower.cert
    mode: 0444
    group: root
    owner: root

- name: Deploy tower-cli config
  template:
    src: templates/tower_cli.cfg.j2
    dest: /etc/tower/tower_cli.cfg
    mode: 0600

- name: Install Tower license
  uri:
    url: https://{{ inventory_hostname }}/api/v2/config/
    method: POST
    validate_certs: no
    user: admin
    password: "{{ tower_pass }}"
    force_basic_auth: yes
    status_code: 200
    body: "{{ tower_license }}"
    body_format: json

- name: Create Organisations
  uri:
    url: https://localhost/api/v2/organizations/
    method: POST
    validate_certs: no
    user: admin
    password: "{{ tower_pass }}"
    force_basic_auth: yes
    body: '{ "name": "{{ item.name }}", "description": "{{ item.desc }}" }'
    body_format: json
    status_code:
      - 201
      - 400
  register: response
  changed_when: resonse.status == 201
  with_items: "{{ tower_orgs }}"

- name: Create Teams
  uri:
    url: https://localhost/api/v2/organizations/{{ item.org }}/teams/
    method: POST
    validate_certs: no
    user: admin
    password: "{{ tower_pass }}"
    force_basic_auth: yes
    body: '{ "organization": "{{ item.org }}", "name": "{{ item.name }}", "description": "{{ item.desc }}" }'
    body_format: json
    status_code:
      - 201
      - 400
  register: response
  changed_when: resonse.status == 201
  with_items: "{{ tower_teams }}"

- name: Add LDAP Config
  uri:
    url: https://localhost/api/v2/settings/ldap/
    method: PATCH
    validate_certs: no
    user: admin
    password: "{{ tower_pass }}"
    force_basic_auth: yes
    body: "{{ lookup('template','ldap_conf.json.j2') }}"
    body_format: json

- name: Delete demo inventory
  uri:
    url:  https://localhost/api/v2/inventories/1/
    method: DELETE
    user: admin
    password: "{{ tower_pass }}"
    validate_certs: False
    force_basic_auth: yes
    status_code:
      - 200
      - 201
      - 202
      - 204
      - 400
      - 404
  register: response
  changed_when: response.status == 204

- name: Delete demo project
  uri:
    url:  https://localhost/api/v2/projects/4/
    method: DELETE
    user: admin
    password: "{{ tower_pass }}"
    validate_certs: False
    force_basic_auth: yes
    status_code:
      - 200
      - 201
      - 202
      - 204
      - 400
      - 404
  register: response
  changed_when: response.status == 204

- name: Delete demo template
  uri:
    url:  https://localhost/api/v2/job_templates/5/
    method: DELETE
    user: admin
    password: "{{ tower_pass }}"
    validate_certs: False
    force_basic_auth: yes
    status_code:
      - 200
      - 201
      - 202
      - 204
      - 400
      - 404
  register: response
  changed_when: response.status == 204

- name: Delete demo credential
  uri:
    url:  https://localhost/api/v2/credentials/1/
    method: DELETE
    user: admin
    password: "{{ tower_pass }}"
    validate_certs: False
    force_basic_auth: yes
    status_code:
      - 200
      - 201
      - 202
      - 204
      - 400
      - 404
  register: response
  changed_when: response.status == 204

- name: Delete default organization
  uri:
    url:  https://localhost/api/v2/organizations/Default/
    method: DELETE
    user: admin
    password: "{{ tower_pass }}"
    validate_certs: False
    force_basic_auth: yes
    status_code:
      - 200
      - 201
      - 202
      - 204
      - 400
      - 404
  register: response
  changed_when: response.status == 204

- name: Add win_shell/win_feature/win_reboot to allowed adhoc modules
  uri:
    url:  https://localhost/api/v2/settings/all/
    method: PATCH
    user: admin
    password: "{{ tower_pass }}"
    body: "{{ lookup('template','tower_config_adhoc.json.j2') }}"
    body_format: json
    validate_certs: False
    force_basic_auth: yes
    status_code:
      - 200
      - 400
  register: response
  changed_when: response.status == 200

- name: Set Base URL of Tower
  uri:
    url:  https://localhost/api/v2/settings/system/
    method: PATCH
    user: admin
    password: "{{ tower_pass }}"
    body: '{ "TOWER_URL_BASE": "https://{{ inventory_hostname }}" }'
    body_format: json
    validate_certs: False
    force_basic_auth: yes
    status_code:
      - 200
      - 204
      - 400
  register: response
  changed_when: response.status == 200

  #https://github.com/mgmt-sa-tiger-team/skylight/blob/master/roles/ansible-tower/tasks/setup.yml#L55

# Configure UI login parameters (Login warning text)
- name: Configure UI login parameters
  tower_settings:
    name: CUSTOM_LOGIN_INFO
    value: "{{ tower_login_banner }}"

# TODO: Add custom logo

# Need to write SSH key to file for use in tower_credential
- name: Stage SSH key to temp file
  copy:
    content: "{{ svc_ansible_private_ssh_key }}"
    dest: /tmp/ssh.key

- name: Stage Git SSH key to temp file
  copy:
    content: "{{ svc_git_private_ssh_key }}"
    dest: /tmp/git.key

# We need to associate creds with a user - we delete the user after creating the creds
- name: Add service account 
  tower_user:
    username: "{{ svc_ansible_user }}"
    password: "{{ svc_ansible_password }}"
    email: "{{ svc_ansible_email }}"
    first_name: Ansible
    last_name: Generic
    state: present

- name: Add service account SSH credentials
  tower_credential:
    kind: ssh
    name: "{{ svc_ansible_user }} SSH"
    description: SSH key
    organization: ORG
    team: TEAM
    state: present
    user: "{{ svc_ansible_user }}"
    username: "{{ svc_ansible_user }}"
    ssh_key_data: /tmp/ssh.key
    become_method: sudo
    become_username: root
    become_password: "{{ svc_ansible_password }}"

- name: Add service account Git credentials
  tower_credential:
    kind: scm
    name: "{{ svc_ansible_user }} GIT"
    description: Git Service account
    organization: ORG
    team: TEAM
    state: present
    user: "{{ svc_ansible_user }}"
    username: "{{ svc_ansible_user }}"
    ssh_key_data: /tmp/git.key

- name: Create vault credentials
  tower_credential:
    kind: vault
    name: "{{ svc_ansible_user }} Vault"
    description: Ansible Vault
    organization: ORG
    team: TEAM
    state: present
    vault_password: "{{ vault_vault_password }}"

# We're done with the user account, delete it so it can't be used interactively
- name: Remove service account user
  tower_user:
    username: "{{ svc_ansible_user }}"
    email: "{{ svc_ansible_email }}"
    state: absent

# Credentials for Foreman
- name: Create Satellite 6 credentials
  tower_credential:
    name: "satellite 6"
    description: "Satellite 6"
    organization: ORG
    team: TEAM
    state: present
    kind: satellite6
    username: "{{ svc_sat6_user }}"
    password: "{{ svc_sat6_pass }}"
    host: "{{ sat6_url }}"

# Add new inventory
- name: Create Satellite inventory
  tower_inventory:
    name: "satellite 6"
    description: "Satellite 6"
    organization: ORG
    state: present

# Create Foreman inventory source
- name: Setup Sat6 as an inventory source
  tower_inventory_source:
    name: "satellite 6"
    description: "Satellite 6"
    state: present
    inventory: "satellite 6"
    credential: "satellite 6"
    overwrite: true
    overwrite_vars: false
    source: satellite6
    update_cache_timeout: 0
    update_on_launch: false
    source_vars: '{ ssl_verify: false }'

# TODO: Give teams permission to read/adhoc/use/update the inventory



####################  PROJECT  #############################


# Needed for tower_credential method





# Not currently working - https://github.com/ansible/ansible/issues/45172



# TODO: Give the ansible user permission to use each of the the credentials


# Add new inventory


# Create Sat6 inventory source


# TODO: Give the ansible user permission to use and update the inventory

################ PROJECT ###################################
# Create project
- name: Create project
  tower_project:
    name: GG_Infra
    organization: Default
    scm_type: git
    scm_url: "{{ git_url }}"
    scm_branch: "{{ git_branch }}"
    scm_clean: true
    scm_credential: "{{ svc_git_user }} SCM key"
    scm_update_on_launch: true

# Checkout Project (should happen on creation - need to wait for it to complete)

# Create project inventory
- name: Create project inventory
  tower_inventory:
    name: "GG_Infra (Lab)"
    description: "Inventory from project"
    organization: Default
    state: present

- name: Create project inventory
  tower_inventory:
    name: "GG_Infra (Core)"
    description: "Inventory from project"
    organization: Default
    state: present

- name: Setup Git repo as an inventory source
  tower_inventory_source:
    name: "GG_Infra (Lab)"
    description: "Inventory from project"
    state: present
    inventory: "GG_Infra (Lab)"
    overwrite: true
    overwrite_vars: true
    source: scm
    source_project: GG_Infra
    source_path: lab/hosts
    update_cache_timeout: 0
    update_on_project_update: true

- name: Setup Git repo as an inventory source
  tower_inventory_source:
    name: "GG_Infra (Core)"
    description: "Inventory from project"
    state: present
    inventory: "GG_Infra (Core)"
    overwrite: true
    overwrite_vars: true
    source: scm
    source_project: GG_Infra
    source_path: core/hosts
    update_cache_timeout: 0
    update_on_project_update: true

# Create job templates from project
- name: Create job template
  tower_job_template:
    name: Generic Hardening
    project: GG_Infra
    playbook: generic.yml
    job_type: run
    state: present
    inventory: "satellite 6"
    become_enabled: true
    credential: "{{ svc_ansible_user }} SSH key"
    vault_credential: "vault credential"
