# Tasks to join a Solaris 11 client

- name: Assert required variables
  tags:
    - assertion
    - ipaclient
  assert:
    that:
      - ldap_bind_user is defined
      - ldap_bind_pass is defined
      - ldap_sudo_pass is defined

- name: Ensure host has FQDN
  assert:
    that:
      - "ansible_domain != '' "
    msg: "Please configure the host to be aware of its FQDN"

# Install ipa-ca certs
- name: Retrieve the IPA CA cert
  tags:
    - enroll
    - ldap
  get_url:
    url: http://{{ ipaclient_server }}/ipa/config/ca.crt
    dest: "{{ item }}"
  with_items:
    - /tmp/ipa-ca.pem
    - /etc/ldap-ca.pem

- name: Test for existing cert store
  tags:
    - enroll
    - ldap
  stat:
    path: /var/ldap/cert8.db
  register: _test_existingcertstore

- name: Create cert store
  tags:
    - enroll
    - ldap
  command: certutil -N -d /var/ldap --empty-password
  register: _cmd_out
  failed_when: "'Enter Password' in _cmd_out.stderr"
  when: not _test_existingcertstore.stat.exists

- name: Add IPA CA to cert store
  tags:
    - enroll
    - ldap
  command: certutil -A -n IPA-CA -t "CT,C,C" -d /var/ldap -i /tmp/ipa-ca.pem

- name: Fix permissions on cert store
  tags:
    - enroll
    - ldap
  file:
    name: "/var/ldap/{{ item }}"
    mode: 0444
  with_items:
    - cert8.db
    - key3.db
    - secmod.db

# We don't need random password object for Solaris,
# so we can use the ipa_host module.
- name: Create host record on IPA server
  tags:
    - enroll
    - ipaclient
  ipa_host:
    name: "{{ inventory_hostname }}"
    force: True
    ipa_host: "{{ ipaclient_server }}"
    ipa_user: "{{ ipaclient_enroll_user }}"
    ipa_pass: "{{ ipaclient_enroll_pass }}"
    state: present
    ns_os_version: "{{ ansible_distribution_release }}"
    validate_certs: "{{ ipaclient_validate_certs }}"

- include: api/manageResourcePools.yml

- name: Get admin ticket
  tags:
    - enroll
    - krb5
  delegate_to: localhost
  become: False
  no_log: True
  shell: >
    echo {{ ipaclient_enroll_pass }} | kinit {{ ipaclient_enroll_user }}
  register: _ipa_auth_ok
  check_mode: no
  changed_when: False
  ignore_errors: True

- name: Verify admin ticket was retrieved successfully
  tags:
    - enroll
    - krb5
  assert:
    that: _ipa_auth_ok.rc == 0
    msg: "ERROR - Unable to obtain TGT for user {{ ipaclient_enroll_user }}"

- name: Retrieve keytab
  tags:
    - enroll
    - krb5
  delegate_to: localhost
  become: False
  command: >
    ipa-getkeytab
    --server {{ipaclient_server}}
    --keytab /tmp/host_{{ inventory_hostname }}.kt
    --principal host/{{ inventory_hostname }}
  register: _retrieve_result
  check_mode: no
  changed_when: False
  failed_when: >
  not ('Keytab successfully retrieved' in _retrieve_result.stderr or
  'krbPrincipalKey not found' in _retrieve_result.stderr)

- name: Destroy admin ticket
  tags:
    - enroll
    - krb5
  delegate_to: localhost
  become: False
  command: kdestroy -A

- name: Get keytab
  tags:
    - enroll
    - krb5
  delegate_to: localhost
  become: False
  command: base64 /tmp/host_{{ inventory_hostname }}.kt
  register: _keytab
  check_mode: no
  no_log: True

- name: Destroy stored keytab
  tags:
    - enroll
    - krb5
  delegate_to: localhost
  become: False
  file:
    path: /tmp/host_{{ inventory_hostname }}.kt
    state: absent

- name: Deploy base64 keytab
  tags:
    - enroll
    - krb5
  copy:
    content: "{{ _keytab.stdout }}"
    dest: /tmp/host_{{ inventory_hostname }}.b64
    mode: 0600
    owner: root
    group: root
  no_log: True

- name: Base64-decode keytab
  tags:
    - enroll
    - krb5
  shell: >
    umask 077 &&
    base64 -d /tmp/host_{{ inventory_hostname }}.b64 > {{ ipa_client_host_keytab }}"

- name: Install krb5 config
  tags:
    - enroll
    - krb5
  template:
    src: templates/krb5.conf.j2
    dest: /etc/krb5/krb5.conf
    mode: 0644
    owner: root
    group: sys

- name: Set LDAP DC string from domain
  set_fact:
    realm_dc: "dc={{ ipaclient_domain.split('.') | join(',dc=') | lower }}"

- name: (sudo) Configure ldap.conf
  tags:
    - enroll
    - ldap
    - sudo
  template:
    src: templates/ldap.conf_solaris.j2
    dest: /etc/ldap.conf
    mode: 0644
    owner: root
    group: root

- name: (sudo) Enable FQDN lookups
  tags:
    - sudo
  lineinfile:
    dest: /etc/sudoers.d/fqdn_lookups
    line: "Defaults fqdn"
    state: present
    create: yes

- name: Configure nsswitch
  tags:
    - enroll
    - ldap
  template:
    src: templates/nsswitch_solaris.j2
    dest: /etc/nsswitch.conf
    owner: root
    group: sys
    mode: 0644
  register: test_nsswitchchanged

- name: Reload nsswitch
  tags:
    - enroll
    - ldap
    - sudo
  command: nscfg import -f system/name-service/switch
  when: test_nsswitchchanged|changed

- name: Test NIS domain value
  tags: [nis]
  lineinfile:
    dest: /etc/defaultdomain
    line: "{{ ipaclient_domain }}"
    state: present
    create: yes
  register: test_nisneedsconfigure

- name: (sudo) Configure NIS domain
  tags: [nis]
  command: nscfg import -d svc:/network/nis/domain:default
  register: test_nisneedschange
  when: test_nisneedsconfigure|changed

- name: (sudo) Configure NIS domain
  tags: [nis]
  service:
    name: nis/domain
    state: started
  when: test_nisneedschange|changed

- name: Ensure LDAP is configured
  template:
    src: templates/ldap_client_file_solaris.j2
    dest: /var/ldap/ldap_client_file
    owner: root
    group: root
    mode: 0400
  register: test_ldap_config

- name: Ensure LDAP is configured
  template:
    src: templates/ldap_client_cred_solaris.j2
    dest: /var/ldap/ldap_client_cred
    owner: root
    group: root
    mode: 0400
  register: test_ldap_creds
  no_log: true

- name: Import LDAP config from disk into smf
  tags:
    - enroll
    - ldap
  command: nscfg import -f svc:/network/ldap/client:default
  when: test_ldap_config|changed or test_ldap_creds|changed

- name: Restart autofs as auto_master or automount may have changed
  tags:
    - enroll
    - ldap
  service:
    name: system/filesystem/autofs
    state: restarted
  when: test_ldap_config|changed

- name: Ensure all services are online
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  with_items:
    - 'svc:/network/nis/domain:default'
    - 'svc:/system/name-service/switch:default'
    - 'svc:/network/ldap/client:default'
    - 'svc:/system/filesystem/autofs:default'

- name: (pam)(login)(auth) Allow local passwords to override LDAP passwords
  pamd:
    name: login
    type: auth
    control: required
    module_path: pam_unix_auth.so.1
    new_type: auth
    new_control: binding
    new_module_path: pam_unix_auth.so.1
    module_arguments: 'server_policy'
  tags: [pam]

- name: (pam)(login)(auth) Allow LDAP use
  pamd:
    name: login
    type: auth
    control: binding
    module_path: pam_unit_auth.so.1
    module_arguments: 'server_policy'
    new_type: auth
    new_control: required
    new_module_path: pam_ldap.so.1
    state: after
  tags: [pam]

- name: (pam)(login)(auth) Fix previous role
  pamd:
    name: login
    type: auth
    control: required
    module_path: pam_ldap.so.1
    module_arguments: 'server_policy'
    state: args_absent
  tags: [pam]

- name: (pam)(login)(auth) Allow Kerberos
  pamd:
    name: login
    type: auth
    control: required
    module_path: pam_dhkeys.so.1
    new_type: auth
    new_control: sufficient
    new_module_path: pam_krb5.so.1
    state: after
  tags: [pam]

- name: (pam)(other)(auth) Allow local passwords to override LDAP passwords
  pamd:
    name: other
    type: auth
    control: required
    module_path: pam_unix_auth.so.1
    new_type: auth
    new_control: binding
    new_module_path: pam_unix_auth.so.1
    module_arguments: 'server_policy'
  tags: [pam]

- name: (pam)(other)(auth) Allow LDAP use
  pamd:
    name: other
    type: auth
    control: binding
    module_path: pam_unix_auth.so.1
    new_type: auth
    new_control: required
    new_module_path: pam_ldap.so.1
    state: after
  tags: [pam]

- name: (pam)(other)(auth) Allow Kerberos
  pamd:
    name: other
    type: auth
    control: required
    module_path: pam_dhkeys.so.1
    new_type: auth
    new_control: sufficient
    new_module_path: pam_krb5.so.1
    state: after
  tags: [pam]

- name: (pam)(other)(account) Allow local passwords to override LDAP passwords
  pamd:
    name: other
    type: account
    control: required
    module_path: pam_unix_account.so.1
    new_type: account
    new_control: binding
    new_module_path: pam_unix_account.so.1
    module_arguments: 'server_policy'
  tags: [pam]

- name: (pam)(other)(account) Allow LDAP use
  pamd:
    name: other
    type: account
    control: required
    module_path: pam_tsol_account.so.1
    new_type: account
    new_control: required
    new_module_path: pam_ldap.so.1
    state: after
  tags: [pam]

- name: (pam)(other)(password) Allow local passwords to override LDAP passwords
  pamd:
    name: other
    type: password
    control: required
    module_path: pam_authok_store.so.1
    new_type: password
    new_control: binding
    new_module_path: pam_authok_store.so.1
    module_arguments: 'server_policy'
  tags: [pam]

- name: (pam)(passwd)(auth) Allow local passwords to override LDAP passwords
  pamd:
    name: passwd
    type: auth
    control: required
    module_path: pam_passwd_auth.so.1
    new_type: auth
    new_control: binding
    new_module_path: pam_passwd_auth.so.1
    module_arguments: 'server_policy'
    state: after
  tags: [pam]

- name: (pam)(passwd)(auth) Allow LDAP use
  pamd:
    name: passwd
    type: auth
    control: binding
    module_path: pam_unix_auth.so.1
    new_type: auth
    new_control: required
    new_module_path: pam_ldap.so.1
    state: after
  tags: [pam]
