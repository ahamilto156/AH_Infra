---
# tasks file for ipa-client-ansible
- name: Include OS specific variables
  tags:
    - import
    - ipaclient
  include_vars: "{{ ansible_distribution }}.yml"

- name: Assert local enrollment status
  tags:
    - assertion
    - ipaclient
  register: __ipaclient_ipaconf
  check_mode: no
  stat:
    path: "{{ ipa_client_host_default }}"

#Note: Block is conditional; see tail of play.
- block:
    - name: Assert supported distribution
      tags:
        - assertion
        - ipaclient
      assert:
        that: >
              {% for key, value in ipaclient_supported_distrobution.items() -%}
                ( ansible_distribution == "{{ key }}" and ansible_distribution_version | float >= {{ value.version }}){% if not loop.last %} or {% endif %}
              {%- endfor %}
        msg: >
              This play is only supported on the following operating systems:
              {% for key, value in ipaclient_supported_distrobution.items() -%}
                {{ key }} {{ value.version }}{% if not loop.last %}, {% endif %}
              {%- endfor %}

    - name: Assert required variables
      tags:
        - assertion
        - ipaclient
      assert:
        that:
          - ipaclient_server is defined
          - ipaclient_domain is defined
          - ipaclient_enroll_user is defined
          - ipaclient_enroll_pass is defined
  #        - ipaclient_resource_pools is defined

    - name: Ensure ipaclient_hostname
      set_fact:
        ipaclient_hostname: "{{ ansible_nodename }}"
      when: not ipaclient_hostname

    - name: obtain auth token
      uri:
        url: "https://{{ ipaclient_server }}/ipa/session/login_password"
        method: POST
        validate_certs: "{{ ipaclient_validate_certs }}"
        headers:
          Content-Type: "application/x-www-form-urlencoded"
          referer: "https://{{ ipaclient_server }}/ipa"
          Accept: "text/plain"
        status_code: 200
        body: "user={{ ipaclient_enroll_user }}&password={{ ipaclient_enroll_pass }}"
      register: __auth_token_resp
      no_log: True

    - set_fact:
        __auth_token: "{{ __auth_token_resp.set_cookie }}"
      changed_when: False
      no_log: True

    - name: get realm enrollment status
      uri:
        url: "https://{{ ipaclient_server }}/ipa/json"
        method: POST
        validate_certs: "{{ ipaclient_validate_certs }}"
        return_content: yes
        body_format: json
        headers:
          Cookie: "{{ __auth_token }}"
          referer: "https://{{ ipaclient_server }}/ipa"
          Content-Type: application/json
          Accept: application/json
        body: >
          {
            "id": 0,
            "method": "host_show/1",
            "params": [
                [ "{{ ipaclient_hostname }}" ],
                {
                    "version": "{{ ipaclient_api_version }}"
                }
            ]
          }
      register: __realm_enrollment_resp
      changed_when: False

      # True if __realm_enrollment_resp.json.result is defined.
    - name: Assert realm enrollment status
      set_fact:
        __realm_enrolled: "{{ True if __realm_enrollment_resp.json.result else false }}"

    - debug: msg="{{ __realm_enrolled }}"

    # Enrolement routine
    - include: "{{ ansible_distribution }}.yml"

  when: not __ipaclient_ipaconf.stat.exists
  # End block statement
