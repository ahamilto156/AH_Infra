// TODO: Need to set motion sensors to OFF on startup so that they are not 'NULL'

// TODO: Need to poll doors at startup to get state

val logName = "ELK Parser"

rule "Elk Parser"
when
    Item Elk_TCP changed
then
    val buffer = Elk_TCP.state.toString.split("\r\n")

    //logInfo(logName,"Elk status string: " + Elk_TCP.state.toString)
    buffer.forEach[ line |
        //logInfo(logName,"\"" + line + "\"")

        // Zone status change (ZC)
        if (line.substring(2,4).equals("ZC")) {
            val status = line.substring(7,8)
            val zone = line.substring(4,7)
            if ((status.equals("9")) || (status.equals("A")) || (status.equals("B"))) {
                //logInfo(logName,"ELK_Zone " + zone + " violated.")
                sendCommand("ELK_Zone" + zone, ON.toString)
            } else if ((status.equals("1")) || (status.equals("2")) || (status.equals("3"))) {
                //logInfo(logName,"ELK_Zone " + zone + " normal.")
                sendCommand("ELK_Zone" + zone, OFF.toString)
            }

        // Output status change (CC)
        } else if (line.substring(2,4).equals("CC")) {
            val status = line.substring(7,8)
            val output = line.substring(4,7)
            if (status.equals("0")) {
                //logInfo(logName,"ELK_Output " + output + " OFF.")
                sendCommand("ELK_Output" + output, OFF.toString)
            } else if (status.equals("1")) {
                //logInfo(logName,"ELK_Output " + output + " ON.")
                sendCommand("ELK_Output" + output, ON.toString)
            }

        // Arming Status
        //      1EAS000000002111111100000000000D
        } else if (line.substring(2,4).equals("AS")) {
            val armstate1 = line.substring(4,5)    // array of 8 areas
            val armstate2 = line.substring(5,6)
            val armstate3 = line.substring(6,7)
            val armstate4 = line.substring(7,8)
            val armstate5 = line.substring(8,9)
            val armstate6 = line.substring(9,10)
            val armstate7 = line.substring(10,11)
            val armstate8 = line.substring(11,12)
            val armupstate1 = line.substring(12,13) // array of 8 areas
            val armupstate2 = line.substring(13,14)
            val armupstate3 = line.substring(14,15)
            val armupstate4 = line.substring(15,16)
            val armupstate5 = line.substring(16,17)
            val armupstate6 = line.substring(17,18)
            val armupstate7 = line.substring(18,19)
            val armupstate8 = line.substring(19,20)
            val alarmstate1 = line.substring(20,21) // array of 8 areas
            val alarmstate2 = line.substring(21,22)
            val alarmstate3 = line.substring(22,23)
            val alarmstate4 = line.substring(23,24)
            val alarmstate5 = line.substring(24,25)
            val alarmstate6 = line.substring(25,26)
            val alarmstate7 = line.substring(26,27)
            val alarmstate8 = line.substring(27,28)
            //armstateX
            //0=Disarmed, 1=Armed Away, 2=Armed Stay, 3=Armed Stay Instant, 4=Armed Night, 5=Armed Night Instant, 6=Armed Vacation

            //armupstateX
            //0=Not Ready, 1=Ready, 2=Ready Force, 3=Armed with Exit Timer, 4=Armed, 5=Force Armed with zone violated, 6=Armed with Bypass

            //alarmstateX
            //0=No Alarm Active, 1=Entry Delay Active, 2=Alarm Abort Delay Active, 3=Fire Alarm, 4=Medical Alarm, 5=Police Alarm, 6=Burgler Alarm,
            //7=Aux1Alarm, 8=Aux2Alarm, 9=Aux3Alarm, :=Aux4Alarm, ;=CO Alarm, <=Emergency Alarm, ==FreezeAlarm, >=Gas Alarm, ?=HeatAlarm,
            //@=Water Alarm, A=FireSupervisory, B=VerifyFire

            // logInfo(logName,"Arm State1   = " + armstate1)
            // logInfo(logName,"Arm State2   = " + armstate2)
            // logInfo(logName,"Arm State3   = " + armstate3)
            // logInfo(logName,"Arm State4   = " + armstate4)
            // logInfo(logName,"Arm State5   = " + armstate5)
            // logInfo(logName,"Arm State6   = " + armstate6)
            // logInfo(logName,"Arm State7   = " + armstate7)
            // logInfo(logName,"Arm State8   = " + armstate8)
            // logInfo(logName,"Arm Up State1= " + armupstate1)
            // logInfo(logName,"Arm Up State2= " + armupstate2)
            // logInfo(logName,"Arm Up State3= " + armupstate3)
            // logInfo(logName,"Arm Up State4= " + armupstate4)
            // logInfo(logName,"Arm Up State5= " + armupstate5)
            // logInfo(logName,"Arm Up State6= " + armupstate6)
            // logInfo(logName,"Arm Up State7= " + armupstate7)
            // logInfo(logName,"Arm Up State8= " + armupstate8)
            // logInfo(logName,"Alarm State1 = " + alarmstate1)
            // logInfo(logName,"Alarm State2 = " + alarmstate2)
            // logInfo(logName,"Alarm State3 = " + alarmstate3)
            // logInfo(logName,"Alarm State4 = " + alarmstate4)
            // logInfo(logName,"Alarm State5 = " + alarmstate5)
            // logInfo(logName,"Alarm State6 = " + alarmstate6)
            // logInfo(logName,"Alarm State7 = " + alarmstate7)
            // logInfo(logName,"Alarm State8 = " + alarmstate8)

        // Alarm Memory
        //      0CAM000000007F
        } else if (line.substring(2,4).equals("AM")) {
            val alarmmem1 = line.substring(4,5) // array of 8 areas
            val alarmmem2 = line.substring(5,6)
            val alarmmem3 = line.substring(6,7)
            val alarmmem4 = line.substring(7,8)
            val alarmmem5 = line.substring(8,9)
            val alarmmem6 = line.substring(9,10)
            val alarmmem7 = line.substring(10,11)
            val alarmmem8 = line.substring(11,12)
            // logInfo(logName,"Alarm Memory1 = " + alarmmem1)
            // logInfo(logName,"Alarm Memory2 = " + alarmmem2)
            // logInfo(logName,"Alarm Memory3 = " + alarmmem3)
            // logInfo(logName,"Alarm Memory4 = " + alarmmem4)
            // logInfo(logName,"Alarm Memory5 = " + alarmmem5)
            // logInfo(logName,"Alarm Memory6 = " + alarmmem6)
            // logInfo(logName,"Alarm Memory7 = " + alarmmem7)
            // logInfo(logName,"Alarm Memory8 = " + alarmmem8)
        }
    ]
end

/*
Other codes not really useful to us
16XK02581832409190110060        - Ethernet module test frame + timestamp
19KC01000001001000000000015     - Keypad KeyChange Update

// One string !!
0AZC003200CD
1EAS000000001111111100000000000E
0CAM000000007F
//

*/



//------- Input sensor proxy rules ------------

rule "Zone001 Command"
when
    Item ELK_Zone001 received command
then
    if(receivedCommand == ON) {
        Dining_FrontDoor.postUpdate(OPEN)
    } else {
        Dining_FrontDoor.postUpdate(CLOSED)
    }
    Dining_FrontDoor_LastUpdate.postUpdate(new DateTimeType())
end


rule "Zone002 Command"
when
    Item ELK_Zone002 received command
then
    if(receivedCommand == ON) {
        Garage_MotionDetector.postUpdate(OPEN)
    } else {
        Garage_MotionDetector.postUpdate(CLOSED)
    }
    if(receivedCommand == ON) Garage_Occupancy.sendCommand(ON)
end


rule "Zone003 Command"
when
    Item ELK_Zone003 received command
then
    if(receivedCommand == ON) {
        Dining_MotionDetector.postUpdate(OPEN)
    } else {
        Dining_MotionDetector.postUpdate(CLOSED)
    }
    if(receivedCommand == ON) Dining_Occupancy.sendCommand(ON)
end


rule "Zone004 Command"
when
    Item ELK_Zone004 received command
then
    if(receivedCommand == ON) {
        Lounge_MotionDetector.postUpdate(OPEN)
    } else {
        Lounge_MotionDetector.postUpdate(CLOSED)
    }
    if(receivedCommand == ON) Lounge_Occupancy.sendCommand(ON)
end


rule "Zone005 Command"
when
    Item ELK_Zone005 received command
then
    if(receivedCommand == ON) {
        Bedroom1_MotionDetector.postUpdate(OPEN)
    } else {
        Bedroom1_MotionDetector.postUpdate(CLOSED)
    }
    if(receivedCommand == ON) Bedroom1_Occupancy.sendCommand(ON)
end


rule "Zone006 Command"
when
    Item ELK_Zone006 received command
then
    if(receivedCommand == ON) {
        Hallway_MotionDetector.postUpdate(OPEN)
    } else {
        Hallway_MotionDetector.postUpdate(CLOSED)
    }
    if(receivedCommand == ON) Hallway_Occupancy.sendCommand(ON)
end


rule "Zone007 Command"
when
    Item ELK_Zone007 received command
then
    if(receivedCommand == ON) {
        Garage_RollerDoor.postUpdate(OPEN)
    } else {
        Garage_RollerDoor.postUpdate(CLOSED)
    }
    Garage_RollerDoor_LastUpdate.postUpdate(new DateTimeType())
end


rule "Zone008 Command"
when
    Item ELK_Zone008 received command
then
    if(receivedCommand == ON) {
        Garage_SideDoor.postUpdate(OPEN)
    } else {
        Garage_SideDoor.postUpdate(CLOSED)
    }
    Garage_SideDoor_LastUpdate.postUpdate(new DateTimeType())
end


rule "Zone009 Command"
when
    Item ELK_Zone009 received command
then
    if(receivedCommand == ON) {
        Doorbell.postUpdate(OPEN)
    } else {
        Doorbell.postUpdate(CLOSED)
    }
    Doorbell_LastUpdate.postUpdate(new DateTimeType())
end


//------- Output proxy rules ------------

rule "Garage_RollerDoorButton to ELK_Output009"
when
    Item Garage_RollerDoorButton changed from OFF to ON
then
    Elk_TCP.sendCommand('0Ecn0090000100D0')   // Output 009 on for 1 second
end

// Set button state to match output state
rule "ELK_Output009 to Garage_RollerDoorButton"
when
    Item ELK_Output009 received update
then
    if(Garage_RollerDoorButton != ELK_Output009.state) Garage_RollerDoorButton.postUpdate(ELK_Output009.state)
end


rule "System Mute"
when
    Item vAnnouncementMute received command
then
    if(receivedCommand == ON) {
        Elk_TCP.sendCommand('0Ecn0620000000D2')
    } else {
        Elk_TCP.sendCommand('09cf06200D6')
    }
end

// Set button state to match output state
rule "ELK_Output062 to vAnnouncementMute"
when
    Item ELK_Output062 received update
then
    if(vAnnouncementMute != ELK_Output062.state) vAnnouncementMute.postUpdate(ELK_Output062.state)
end
