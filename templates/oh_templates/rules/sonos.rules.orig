// https://community.openhab.org/t/sonos-grouping-rules-and-ui-visibility-bidirectional/20154

/*
import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.java.math.*
import org.joda.time.*
*/

var Timer CheckSinglePlayerTimer = null
var Timer SonosGroupVisibility = null

val Functions$Function6 <Number, Number, Number, String, String, String, String> updateSingleGroups = [
		NumberItem group1_num,
		NumberItem group2_num,
		NumberItem group3_num,
		StringItem player_a_groupID,
		StringItem player_b_groupID,
		StringItem player_a_name |

		// If the player the updated player has been grouped to is in the "NONE"-group (or is NULL),
		// find a group with zero players and update status of both players.
		if(player_b_groupID.state=="0" || player_b_groupID.state==NULL) {
			if(group1_num.state==0) {
				postUpdate(player_a_groupID,"1")
				postUpdate(player_b_groupID,"1")
				logInfo("openhab", player_a_name + " player + 1 updated to group 1")

			} else if(group2_num.state==0) {
				postUpdate(player_a_groupID,"2")
				postUpdate(player_b_groupID,"2")
				logInfo("openhab", player_a_name + " player + 1 updated to group 2")

			} else if(group3_num.state==0) {
				postUpdate(player_a_groupID,"3")
				postUpdate(player_b_groupID,"3")
				logInfo("openhab", player_a_name + " player + 1 updated to group 3")
			}
		// Else set the updated player to the group id of the matched player
		} else if(player_a_groupID.state!=player_b_groupID.state) {
			postUpdate(player_a_groupID,player_b_groupID.state)
			logInfo("openhab", player_a_name + " player updated to group " + player_b_groupID.state.toString)
		}
		return NULL
	]

// Returns players that are in a group by themselves to standalone mode
val Functions$Function6 <String, String, String, String, String, String, String> checkSinglePlayers = [
		StringItem CheckZonegroupID,
		StringItem ZonegroupID_a,
		StringItem ZonegroupID_b,
		StringItem ZonegroupID_c,
		StringItem UpdatePlayer,
		StringItem UpdatePlayerName |

		if(CheckZonegroupID.state!=ZonegroupID_a.state && CheckZonegroupID.state!=ZonegroupID_b.state && CheckZonegroupID.state!=ZonegroupID_c.state) {
			postUpdate(UpdatePlayer,"0")
			logInfo("openhab", UpdatePlayerName + "player updated to group 0")

		}
		return NULL
	]

///// NUMBER OF PLAYERS IN GROUP
//
//	A simple count of the number of players
//	in each group is made. This is used in
//	various rules, e.g. to determine
//	if a group should be visible in the UI or not.
//
/////////////////////////////////

rule "Sonos number of players in group"
	when
		Item SonosGroupID_Alfresco received update or
		Item SonosGroupID_Living received update or
		Item SonosGroupID_Portable received update
	then
		var Number Group_1 = 0
		var Number Group_2 = 0
		var Number Group_3 = 0

		if(SonosGroupID_Alfresco.state=="1"){
			Group_1 = Group_1 + 1
		}else if(SonosGroupID_Alfresco.state=="2"){
			Group_2 = Group_2 + 1
		}else if(SonosGroupID_Alfresco.state=="3"){
			Group_3 = Group_3 + 1
		}

		if(SonosGroupID_Portable.state=="1"){
			Group_1 = Group_1 + 1
		}else if(SonosGroupID_Portable.state=="2"){
			Group_2 = Group_2 + 1
		}else if(SonosGroupID_Portable.state=="3"){
			Group_3 = Group_3 + 1
		}

		if(SonosGroupID_Living.state=="1"){
			Group_1 = Group_1 + 1
		}else if(SonosGroupID_Living.state=="2"){
			Group_2 = Group_2 + 1
		}else if(SonosGroupID_Living.state=="3"){
			Group_3 = Group_3 + 1
		}

		postUpdate(Sonos_Group1_Number,Group_1)
		postUpdate(Sonos_Group2_Number,Group_2)
		postUpdate(Sonos_Group3_Number,Group_3)
end

///// GROUPING RULES
//
//	The rule will check every other player that the
//	  (1) Group number of the player being added corresponds to the player it is being added to
//	  (2) Zone-ids are not equal (not already grouped)
//	  (3) That the player being checked has a state (not NULL)
//
//	Additional nested logic is required to determine in what direction the player shall be grouped (A to B or B to A).
//	This is a special case that kicks in when both players are single before grouping: It is not possible
//	to add a player that is the local coordinator to a player which is not.
//
/////////////////////////////////


rule "Sonos group alfresco"
	when
		Item SonosGroupID_Alfresco received command
	then

		// Short sleep to make sure the rule to calculate the number of players in a group has executed before the logic is applied.
		Thread::sleep(300)

		if(SonosGroupID_Alfresco.state==SonosGroupID_Portable.state && SonosGroupID_Alfresco.state!="0" && SonosAlfresco_ZoneGroupID.state!=SonosPortable1_ZoneGroupID.state && SonosPortable1_ZoneGroupID.state!=NULL && ((SonosPortable1_LocalCoordinator.state==ON) || (SonosAlfresco_LocalCoordinator.state==ON && ((SonosGroupID_Alfresco.state=="1" && Sonos_Group1_Number.state=="2") || (SonosGroupID_Alfresco.state=="2" && Sonos_Group2_Number.state=="2") || (SonosGroupID_Alfresco.state=="3" && Sonos_Group3_Number.state=="2"))))){

			logInfo("openhab","Entered sonos alfresco grouping rule number 1")

			if(SonosPortable1_LocalCoordinator.state==ON){
				SonosPortable1_Add.sendCommand("{{ sonos_ids.alfresco }}")
				logInfo("openhab","Alfresco player added to Portable")
			}else if(SonosAlfresco_LocalCoordinator.state==ON && ((SonosGroupID_Alfresco.state=="1" && Sonos_Group1_Number.state=="2") || (SonosGroupID_Alfresco.state=="2" && Sonos_Group2_Number.state=="2") || (SonosGroupID_Alfresco.state=="3" && Sonos_Group3_Number.state=="2"))) {
				SonosAlfresco_Add.sendCommand("{{ sonos_ids.portable1 }}")
				logInfo("openhab","Portable player added to Alfresco")
			}

		}else if(SonosGroupID_Alfresco.state==SonosGroupID_Living.state && SonosGroupID_Alfresco.state!="0" && SonosAlfresco_ZoneGroupID.state!=SonosLivingroom_ZoneGroupID.state && SonosLivingroom_ZoneGroupID.state!=NULL && ((SonosLivingroom_LocalCoordinator.state==ON) || (SonosAlfresco_LocalCoordinator.state==ON && ((SonosGroupID_Alfresco.state=="1" && Sonos_Group1_Number.state=="2") || (SonosGroupID_Alfresco.state=="2" && Sonos_Group2_Number.state=="2") || (SonosGroupID_Alfresco.state=="3" && Sonos_Group3_Number.state=="2"))))){

			logInfo("openhab","Entered sonos alfresco grouping rule number 2")

			if(SonosLivingroom_LocalCoordinator.state==ON){
				SonosLivingroom_Add.sendCommand("{{ sonos_ids.alfresco }}")
				logInfo("openhab","Alfresco player added to Living room")
			}else if(SonosAlfresco_LocalCoordinator.state==ON && ((SonosGroupID_Alfresco.state=="1" && Sonos_Group1_Number.state=="2") || (SonosGroupID_Alfresco.state=="2" && Sonos_Group2_Number.state=="2") || (SonosGroupID_Alfresco.state=="3" && Sonos_Group3_Number.state=="2"))) {
				SonosAlfresco_Add.sendCommand("{{ sonos_ids.livingroom }}")
				logInfo("openhab","Living room player added to Alfresco")
			}

		}else{
			SonosAlfresco_StandAlone.sendCommand("ON")
			logInfo("openhab","Alfresco player set to stand alone")
		}
end

rule "Sonos group livingroom"
	when
		Item SonosGroupID_Living received command
	then

		// Short sleep to make sure the rule to calculate the number of players in a group has executed before the logic is applied.
		Thread::sleep(300)

		if(SonosGroupID_Living.state==SonosGroupID_Portable.state && SonosGroupID_Living.state!="0" && SonosLivingroom_ZoneGroupID.state!=SonosPortable1_ZoneGroupID.state && SonosPortable1_ZoneGroupID.state!=NULL && ((SonosPortable1_LocalCoordinator.state==ON) || (SonosLivingroom_LocalCoordinator.state==ON && ((SonosGroupID_Living.state=="1" && Sonos_Group1_Number.state=="2") || (SonosGroupID_Living.state=="2" && Sonos_Group2_Number.state=="2") || (SonosGroupID_Portables.state=="3" && Sonos_Group3_Number.state=="2"))))){

			logInfo("openhab","Entered sonos livingroom grouping rule number 1")

			if(SonosPortable1_LocalCoordinator.state==ON){
				SonosPortable1_Add.sendCommand("{{ sonos_ids.livingroom }}")
				logInfo("openhab","Livinig room player added to Portable")
			}else if(SonosLivingroom_LocalCoordinator.state==ON && ((SonosGroupID_Living.state=="1" && Sonos_Group1_Number.state=="2") || (SonosGroupID_Living.state=="2" && Sonos_Group2_Number.state=="2") || (SonosGroupID_Living.state=="3" && Sonos_Group3_Number.state=="2"))) {
				SonosLivingroom_Add.sendCommand("{{ sonos_ids.portable1 }}")
				logInfo("openhab","Portable player added to Living room")
			}

		}else if(SonosGroupID_Living.state==SonosGroupID_Alfresco.state && SonosGroupID_Living.state!="0" && SonosLivingroom_ZoneGroupID.state!=SonosAlfresco_ZoneGroupID.state && SonosAlfresco_ZoneGroupID.state!=NULL && ((SonosAlfresco_LocalCoordinator.state==ON) || (SonosLivingroom_LocalCoordinator.state==ON && ((SonosGroupID_Living.state=="1" && Sonos_Group1_Number.state=="2") || (SonosGroupID_Living.state=="2" && Sonos_Group2_Number.state=="2") || (SonosGroupID_Living.state=="3" && Sonos_Group3_Number.state=="2"))))){

			logInfo("openhab","Entered sonos livingroom grouping rule number 2")

			if(SonosAlfresco_LocalCoordinator.state==ON){
				SonosAlfresco_Add.sendCommand("{{ sonos_ids.livingroom }}")
				logInfo("openhab","Living room player added to Alfresco")
			}else if(SonosLivingroom_LocalCoordinator.state==ON && ((SonosGroupID_Living.state=="1" && Sonos_Group1_Number.state=="2") || (SonosGroupID_Living.state=="2" && Sonos_Group2_Number.state=="2") || (SonosGroupID_Living.state=="3" && Sonos_Group3_Number.state=="2"))) {
				SonosLivingroom_Add.sendCommand("{{ sonos_ids.alfresco }}")
				logInfo("openhab","Alfresco player added to Living room")
			}

		}else{
			SonosLivingroom_StandAlone.sendCommand("ON")
			logInfo("openhab","Living room player set to stand alone")
		}
end

rule "Sonos group portable1"
	when
		Item SonosGroupID_Portable received command
	then

		// Short sleep to make sure the rule to calculate the number of players in a group has executed before the logic is applied.
		Thread::sleep(300)

		if(SonosGroupID_Portable.state==SonosGroupID_Alfresco.state && SonosGroupID_Portable.state!="0" && SonosPortable1_ZoneGroupID.state!=SonosAlfresco_ZoneGroupID.state && SonosAlfresco_ZoneGroupID.state!=NULL && ((SonosAlfresco_LocalCoordinator.state==ON) || (SonosPortable1_LocalCoordinator.state==ON && ((SonosGroupID_Portable.state=="1" && Sonos_Group1_Number.state=="2") || (SonosGroupID_Portable.state=="2" && Sonos_Group2_Number.state=="2") || (SonosGroupID_Portable.state=="3" && Sonos_Group3_Number.state=="2"))))){

			logInfo("openhab","Entered sonos portable1 grouping rule number 1")

			if(SonosAlfresco_LocalCoordinator.state==ON){
				SonosAlfresco_Add.sendCommand("{{ sonos_ids.portable1 }}")
				logInfo("openhab","Portable player added to Alfresco")
			}else if(SonosPortable1_LocalCoordinator.state==ON && ((SonosGroupID_Portable.state=="1" && Sonos_Group1_Number.state=="2") || (SonosGroupID_Portable.state=="2" && Sonos_Group2_Number.state=="2") || (SonosGroupID_Portable.state=="3" && Sonos_Group3_Number.state=="2"))) {
				SonosPortable1_Add.sendCommand("{{ sonos_ids.alfresco }}")
				logInfo("openhab","Alfresco player added to Portable")
			}

		}else if(SonosGroupID_Portable.state==SonosGroupID_Living.state && SonosGroupID_Portable.state!="0" && SonosPortable1_ZoneGroupID.state!=SonosLivingroom_ZoneGroupID.state && SonosLivingroom_ZoneGroupID.state!=NULL && ((SonosLivingroom_LocalCoordinator.state==ON) || (SonosPortable1_LocalCoordinator.state==ON && ((SonosGroupID_Portable.state=="1" && Sonos_Group1_Number.state=="2") || (SonosGroupID_Portable.state=="2" && Sonos_Group2_Number.state=="2") || (SonosGroupID_Portable.state=="3" && Sonos_Group3_Number.state=="2"))))){

			logInfo("openhab","Entered sonos portable1 grouping rule number 2")

			if(SonosLivingroom_LocalCoordinator.state==ON){
				SonosLivingroom_Add.sendCommand("{{ sonos_ids.portable1 }}")
				logInfo("openhab","Portable player added to Living room")
			}else if(SonosPortable1_LocalCoordinator.state==ON && ((SonosGroupID_Portable.state=="1" && Sonos_Group1_Number.state=="2") || (SonosGroupID_Portable.state=="2" && Sonos_Group2_Number.state=="2") || (SonosGroupID_Portable.state=="3" && Sonos_Group3_Number.state=="2"))) {
				SonosPortable1_Add.sendCommand("{{ sonos_ids.livingroom }}")
				logInfo("openhab","Living room player added to Portable")
			}

		}else{
			SonosPortable1_StandAlone.sendCommand("ON")
			logInfo("openhab","Portable player set to stand alone")
		}
end


//// UPDATE GROUPING RULES
//
//	The rules will update the appropriate group
//	when a sonos player is grouped, either
//  in the OH2 UI or within the Sonos app.
//
/////////////////////////////////

rule "Sonos update group membership portable1"
	when
		Item SonosPortable1_ZoneGroupID changed
	then
		if(SonosPortable1_ZoneGroupID.state==SonosAlfresco_ZoneGroupID.state && SonosAlfresco_ZoneGroupID.state!=NULL) {
			updateSingleGroups.apply(Sonos_Group1_Number, Sonos_Group2_Number, Sonos_Group3_Number, SonosGroupID_Portable, SonosGroupID_Alfresco, "Portable")

		} else if(SonosPortable1_ZoneGroupID.state==SonosLivingroom_ZoneGroupID.state && SonosLivingroom_ZoneGroupID.state!=NULL) {
			updateSingleGroups.apply(Sonos_Group1_Number, Sonos_Group2_Number, Sonos_Group3_Number, SonosGroupID_Portable, SonosGroupID_Living, "Portable")

		// The zone-id changed, but is not grouped with any other players (removed from group).
		// To allow grouping in the UI without the state being reset to single, a timer is applied.
		// This works since grouping in both the OH UI and the Sonos app usually is not performed simultaneously.
		} else {
			if(CheckSinglePlayerTimer===null) {
				CheckSinglePlayerTimer = createTimer(now.plusSeconds(20), [|
					checkSinglePlayers.apply(SonosPortable1_ZoneGroupID, SonosAlfresco_ZoneGroupID, SonosLivingroom_ZoneGroupID, SonosGroupID_Portable,"Portable")
					checkSinglePlayers.apply(SonosAlfresco_ZoneGroupID, SonosPortable1_ZoneGroupID, SonosLivingroom_ZoneGroupID, SonosGroupID_Alfresco,"Alfresco")
					checkSinglePlayers.apply(SonosLivingroom_ZoneGroupID, SonosPortable1_ZoneGroupID, SonosAlfresco_ZoneGroupID, SonosGroupID_Living,"Living room")
					CheckSinglePlayerTimer = null
				])
				logInfo("openhab","CheckSinglePlayerTimer scheduled")
			} else {
				CheckSinglePlayerTimer.reschedule(now.plusSeconds(20))
				logInfo("openhab","CheckSinglePlayerTimer rescheduled")
			}
		}
end

rule "Sonos update group membership alfresco"
	when
		Item SonosAlfresco_ZoneGroupID changed
	then
		if(SonosAlfresco_ZoneGroupID.state==SonosPortable1_ZoneGroupID.state && SonosPortable1_ZoneGroupID.state!=NULL) {
			updateSingleGroups.apply(Sonos_Group1_Number, Sonos_Group2_Number, Sonos_Group3_Number, SonosGroupID_Alfresco, SonosGroupID_Portable, "Alfresco")

		} else if(SonosAlfresco_ZoneGroupID.state==SonosLivingroom_ZoneGroupID.state && SonosLivingroom_ZoneGroupID.state!=NULL) {
			updateSingleGroups.apply(Sonos_Group1_Number, Sonos_Group2_Number, Sonos_Group3_Number, SonosGroupID_Alfresco, SonosGroupID_Living, "Afresco")

		// The zone-id changed, but is not grouped with any other players (removed from group).
		// To allow grouping in the UI without the state being reset to single, a timer is applied.
		// This works since grouping in both the OH UI and the Sonos app usually is not performed simultaneously.
		} else {
			if(CheckSinglePlayerTimer===null) {
				CheckSinglePlayerTimer = createTimer(now.plusSeconds(20), [|
					checkSinglePlayers.apply(SonosPortable1_ZoneGroupID, SonosAlfresco_ZoneGroupID, SonosLivingroom_ZoneGroupID, SonosGroupID_Portable,"Portable")
					checkSinglePlayers.apply(SonosAlfresco_ZoneGroupID, SonosPortable1_ZoneGroupID, SonosLivingroom_ZoneGroupID, SonosGroupID_Alfresco,"Alfresco")
					checkSinglePlayers.apply(SonosLivingroom_ZoneGroupID, SonosPortable1_ZoneGroupID, SonosAlfresco_ZoneGroupID, SonosGroupID_Living,"Living room")
					CheckSinglePlayerTimer = null
				])
				logInfo("openhab","CheckSinglePlayerTimer scheduled")
			} else {
				CheckSinglePlayerTimer.reschedule(now.plusSeconds(20))
				logInfo("openhab","CheckSinglePlayerTimer rescheduled")
			}
		}
end

rule "Sonos update group membership livingroom"
	when
		Item SonosLivingroom_ZoneGroupID changed
	then
		if(SonosLivingroom_ZoneGroupID.state==SonosAlfresco_ZoneGroupID.state && SonosAlfresco_ZoneGroupID.state!=NULL) {
			updateSingleGroups.apply(Sonos_Group1_Number, Sonos_Group2_Number, Sonos_Group3_Number, SonosGroupID_Living, SonosGroupID_Alfresco, "Living room")

		} else if(SonosLivingroom_ZoneGroupID.state==SonosPortable1_ZoneGroupID.state && SonosPortable1_ZoneGroupID.state!=NULL) {
			updateSingleGroups.apply(Sonos_Group1_Number, Sonos_Group2_Number, Sonos_Group3_Number, SonosGroupID_Living, SonosGroupID_Portable, "Living room")

		// The zone-id changed, but is not grouped with any other players (removed from group).
		// To allow grouping in the UI without the state being reset to single, a timer is applied.
		// This works since grouping in both the OH UI and the Sonos app usually is not performed simultaneously.
		} else {
			if(CheckSinglePlayerTimer===null) {
				CheckSinglePlayerTimer = createTimer(now.plusSeconds(20), [|
					checkSinglePlayers.apply(SonosPortable1_ZoneGroupID, SonosAlfresco_ZoneGroupID, SonosLivingroom_ZoneGroupID, SonosGroupID_Portable,"Portable")
					checkSinglePlayers.apply(SonosAlfresco_ZoneGroupID, SonosPortable1_ZoneGroupID, SonosLivingroom_ZoneGroupID, SonosGroupID_Alfresco,"Alfresco")
					checkSinglePlayers.apply(SonosLivingroom_ZoneGroupID, SonosPortable1_ZoneGroupID, SonosAlfresco_ZoneGroupID, SonosGroupID_Living,"Living room")
					CheckSinglePlayerTimer = null
				])
				logInfo("openhab","CheckSinglePlayerTimer scheduled")
			} else {
				CheckSinglePlayerTimer.reschedule(now.plusSeconds(20))
				logInfo("openhab","CheckSinglePlayerTimer rescheduled")
			}
		}
end

///// GROUP VISIBILITY
//
//	The rule is used to control the UI.
//  Specifically, it used to determin
//  if a group should be hidden and if
//  no, which player is to be shown within
//  the group. This has to be the local
//	coordinator in the group.
//
/////////////////////////////////

rule "Sonos group visibility"
	when
		Item SonosGroupID_Alfresco received update or
		Item SonosGroupID_Portable received update or
		Item SonosGroupID_Living received update
	then
		if(SonosGroupVisibility===null) {
			SonosGroupVisibility = createTimer(now.plusSeconds(5), [|

				if(Sonos_Group1_Number.state<=1){
					postUpdate(Sonos_Group1_Visibility,"Hide")
				}else if(Sonos_Group1_Number.state>=2){
					if(SonosGroupID_Alfresco.state=="1" && SonosAlfresco_LocalCoordinator.state==ON){
						postUpdate(Sonos_Group1_Visibility,"Alfresco")
					}else if(SonosGroupID_Portable.state=="1" && SonosPortable1_LocalCoordinator.state==ON){
						postUpdate(Sonos_Group1_Visibility,"Portable")
					}else if(SonosGroupID_Living.state=="1" && SonosLivingroom_LocalCoordinator.state==ON){
						postUpdate(Sonos_Group1_Visibility,"Living room")
					}
				}

				if(Sonos_Group2_Number.state<=1){
					postUpdate(Sonos_Group2_Visibility,"Hide")
				}else if(Sonos_Group2_Number.state>=2){
					if(SonosGroupID_Alfresco.state=="2" && SonosAlfresco_LocalCoordinator.state==ON){
						postUpdate(Sonos_Group2_Visibility,"Alfresco")
					}else if(SonosGroupID_Portable.state=="2" && SonosPortable1_LocalCoordinator.state==ON){
						postUpdate(Sonos_Group2_Visibility,"Portable")
					}else if(SonosGroupID_Living.state=="2" && SonosLivingroom_LocalCoordinator.state==ON){
						postUpdate(Sonos_Group2_Visibility,"Living room")
					}
				}

				if(Sonos_Group3_Number.state<=1){
					postUpdate(Sonos_Group3_Visibility,"Hide")
				}else if(Sonos_Group3_Number.state>=2){
					if(SonosGroupID_Alfresco.state=="3" && SonosAlfresco_LocalCoordinator.state==ON){
						postUpdate(Sonos_Group3_Visibility,"Alfresco")
					}else if(SonosGroupID_Portable.state=="3" && SonosPortable1_LocalCoordinator.state==ON){
						postUpdate(Sonos_Group3_Visibility,"Portable")
					}else if(SonosGroupID_Living.state=="3" && SonosLivingroom_LocalCoordinator.state==ON){
						postUpdate(Sonos_Group3_Visibility,"Living room")
					}
				}

			])
			logInfo("openhab","SonosGroupVisibility scheduled")
			SonosGroupVisibility = null

		} else {
			SonosGroupVisibility.reschedule(now.plusSeconds(5))
			logInfo("openhab","SonosGroupVisibility rescheduled")
		}

end


// Rules defining 'quick switches' used by other events for sonos control
rule "LivingRoom Radio on"
when
  Item LivingRoom_Radio changed from OFF to ON
then
  SonosLivingroom_Radio.postUpdate(OFF)
  SonosLivingroom_Volume.sendCommand(22)
  SonosLivingroom_Radio.sendCommand("Mix 106.3")
	LivingRoom_Radio.postUpdate(OFF)
end

rule "Link Living and Alfresco"
when
  Item LivingRoom_Alfresco_Link changed from OFF to ON
then
	SonosGroupID_Living.postUpdate(1)
	SonosGroupID_Alfresco.postUpdate(1)
	LivingRoom_Alfresco_Link.postUpdate(OFF)
end


/*
rule "radio station test"
when
  Item Sonos_RadioStation_AnnasRoom_Number received command
then

  Sonos_RadioStation_AnnasRoom_Number.postUpdate(receivedCommand)

  switch (receivedCommand)
  {
    case 0 : { SonosPortable1_Radio.sendCommand(null) }
    case 1 : { SonosPortable1_Radio.sendCommand("Mix 106.3") }
    case 2 : { SonosPortable1_Radio.sendCommand("Mix 106.1") }
  }

end
*/
