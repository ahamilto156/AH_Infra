---
#The below play-book will only set up the server as a second authorisation client
# i.e. assumes that generic has been run so that it is set up as a IPA/IdM client to one auth. server

- name: 2nd auth. client - Make the server an IdM client
  become: true
  become_user: root
  hosts: all
  tags: IdM_client
  vars_files:
    - vars/auth2.yml
    - vars/IdM.yml
  tasks:
    - name: IdM client - Installation of relevant packages
    package:
      name: "{{ packages }}"
      state: present

    - name: IdM client - Set up sssd config. file = {{ sssd_conffile }}
      template:
        src: "templates/auth2_client/IdM_client/idm.conf.j2"
        dest: "{{ sssd_conffile }}"
        mode: 0640
        owner: sssd
        group: sssd
        seuser: system_u
        serole: object_r
        setype: sssd_t

    - name: IdM client - Add IdM to {{ sssd_baseconffile }}
      lineinfile:
        regexp: "^domains ="
        line: "domains = {{ SecondDomain }}"
        dest: "{{ sssd_baseconffile }}"   
      notify: restart_sssd

  handlers:
    - name: 2nd auth. client - restart_sssd
      systemd:
        name: sssd
        state: restarted

- name: 2nd auth. client - Make the server an LDAP client
  become: true
  become_user: root
  hosts: all
  tags: LDAP_client
  vars_files:
    - vars/auth2.yml
    - vars/LDAP.yml
  tasks:
    - name: LDAP client - Installation of relevant packages
    package:
      name: "{{ packages }}"
      state: present

    # This assumes that /etc/pki/tls/certs/ca-bundle.crt has CA pem installed previously as we are just adding a second domain    

    - debug:
        msg: "basedir = {{ sssd_basedir }}, confdir = {{ sssd_confdir }} & conffile = {{ sssd_conffile }}"

    - name: LDAP client - Set up sssd config. file = {{ sssd_conffile }}
    ## Need to automate "ldap_search_base = dc=example,dc=com" in {{ sssd_conffile }}
      template:
        src: "templates/auth2_client/LDAP_client/ldap.conf.j2"
        dest: "{{ sssd_conffile }}"
        mode: 0640
        owner: sssd
        group: sssd
        seuser: system_u
        serole: object_r
        setype: sssd_t

    - name: LDAP client - Add LDAP to /etc/sssd.conf
      lineinfile:
        regexp: "^domains ="
        line: "domains = LDAP"
        dest: "/etc/sssd.conf"   
      notify: restart_sssd

  handlers:
    - name: 2nd auth. client - restart_sssd
      systemd:
        name: sssd
        state: restarted

- name: 2nd auth. client - Make the server an AD client
  become: true
  become_user: root
  hosts: all
  tags: AD_client
  vars_files:
    - vars/auth2.yml
    - vars/AD.yml
    - vars/AD_vault.yml
  tasks:
    # - name: AD client - Use AD role
    #   import_role:
    #     name: ansible-role-adjoin

  - name: AD client - Installation of relevant packages
    package:
      name: "{{ packages }}"
      state: present

  - name: AD client - Configure services
    template:
      dest: "{{ conffile.dest }}"
      src: "{{ conffile.src }}"
      mode: 0644
      owner: 'root'
      group: 'root'
    no_log: "{{ adjoin_no_log }}"
    loop:
      - {src: "AD_client/ldap.conf.j2", dest: "/etc/openldap/ad_ldap.conf"}
      - {src: "AD_client/krb5.conf.j2", dest: "/etc/krb5.conf"}
    loop_control:
      loop_var: 'conffile'

  - name: AD client - Join {{ openldap_conffile_ad }} to {{ openldap_conffile_org }}
    command: cat {{ openldap_conffile_ad }} >> {{ openldap_conffile_org }}

  - name: AD client - Remove {{ openldap_conffile_ad }}
    file:
      dest: "{{ openldap_conffile_ad }}"
      state: absent

  - name: AD client - Configure Samba for home directories
    template:
      dest: "/etc/samba/smb_{{ SecondDomain }}.conf"
      src: "AD_client/smb.conf.j2"
      mode: 0644
      owner: 'root'
      group: 'root'
    no_log: "{{ adjoin_no_log }}"

  - block:
    - name: AD client - Check AD connection with testjoin
      command: "timeout 5 /usr/bin/net ads testjoin -s /etc/samba/smb_{{ SecondDomain }}.conf"
      changed_when: false
      no_log: "{{ adjoin_no_log }}"
  rescue:
    - name: AD client - Join AD domain
      command: '/usr/bin/net ads join -s /etc/samba/smb_{{ SecondDomain }}.conf \
        -U{{ vault_ADdomain.username }}%{{ vault_ADdomain.password }} \
        osName="{{ ansible_distribution }}" \
        osVer="{{ ansible_distribution_version }}" \
        createcomputer={{ computer_objects_path }}'
      no_log: "{{ adjoin_no_log }}"

  - name: AD client - Configure SSSD
    template:
      dest: "/etc/sssd/conf.d/{{ SecondDomain }}.conf"
      src: "AD_client/sssd.conf.j2"
      mode: 0600
      owner: 'root'
      group: 'root'
    no_log: "{{ adjoin_no_log }}"
    notify:
      - reconfigure redhat pam
      - clear sssd cache

  - name: AD client - Configure services - Common
    systemd:
      name: "{{ service.name }}"
      enabled: "{{ service.enabled }}"
      masked: "{{ service.masked }}"
      state: "{{ service.state }}"
    loop:
      - {'name':'sssd', 'enabled':'yes', 'masked':'no', 'state':'started'}
      - {'name':'dbus', 'enabled':'yes', 'masked':'no', 'state':'started'}
      - {'name':'systemd-logind', 'enabled':'no', 'masked':'yes', 'state':'stopped'}
    loop_control:
      loop_var: 'service'

  ## The following will have to be detemined on a site-to-site basis
  ## NOTE: The default for adjoin_configure_sudo is false
  - name: AD client - Configure Sudo permissions for admin users
    template:
      dest: "/etc/sudoers.d/10_linux_admins"
      src: "sudoers_10_linux_admins"
      mode: 0440
      validate: "visudo -cf %s"
      owner: 'root'
      group: 'root'
    when: {{ adjoin_configure_sudo }}|bool